**********
Datashader
**********

.. raw:: html

   <div style="width: 65%; float:left">

	 
**Turns even the largest data into images, accurately.**

Datashader is a graphics pipeline system for creating meaningful
representations of large datasets quickly and flexibly. Datashader
breaks the creation of images into a series of explicit steps that
allow computations to be done on intermediate representations.  This
approach allows accurate and effective visualizations to be produced
automatically, and also makes it simple for data scientists to focus
on particular data and relationships of interest in a principled way.
Using highly optimized rendering routines written in Python but
compiled to machine code using `Numba`_, datashader makes it practical
to work with extremely large datasets even on standard hardware.

.. _`Numba`: http://numba.pydata.org

To make it concrete, here's an example of what datashader code looks like:

.. code-block:: python

    >>> import datashader as ds
    >>> import datashader.transfer_functions as tf
    >>> import pandas as pd
    >>> df = pd.read_csv('user_data.csv')

    >>> cvs = ds.Canvas(plot_width=400, plot_height=400)
    >>> agg = cvs.points(df, 'x_col', 'y_col', ds.mean('z_col'))
    >>> img = tf.shade(agg, cmap=['lightblue', 'darkblue'], how='log')

This code reads a data file into a Pandas dataframe ``df``, and then
projects the fields ``x_col`` and ``y_col`` onto the x and y dimensions of
400x400 grid, aggregating it by the mean value of the ``z_col`` of each
datapoint. The results are rendered into an image where the minimum
count will be plotted in ``lightblue``, the maximum in ``darkblue``, and
ranging logarithmically in between.

And here are some sample outputs for data from the 2010 US census,
each constructed using a similar set of code:

.. image:: images/usa_census.jpg

.. image:: images/nyc_races.jpg


Documentation for datashader is primarily provided in the form of
Jupyter notebooks.  To understand which plotting problems datashader
helps you avoid, you can start with our `Plotting Pitfalls`_ notebook.
To see the steps in the datashader pipeline in detail, you can start
with our `Pipeline`_ notebook.  Or you may want to start with detailed
case studies of datashader in action, such as our `NYC Taxi`_, 
`US Census`_, and `OpenSky`_ notebooks.  In most cases, the easiest way to use
Datashader via the high-level `HoloViews`_ package, which lets you flexibly
switch between Datashader and non-Datashader plots generated by Matplotlib
or Bokeh.  Additional notebooks showing how to use
datashader for other applications or data types are viewable on
`Anaconda Cloud`_ and can be downloaded in runnable form as described
on the `datashader examples`_ page.

.. _`Anaconda Cloud`: https://anaconda.org/jbednar/notebooks
.. _`Plotting Pitfalls`: https://anaconda.org/jbednar/plotting_pitfalls
.. _`Pipeline`: https://anaconda.org/jbednar/pipeline
.. _`NYC Taxi`: https://anaconda.org/jbednar/nyc_taxi
.. _`US Census`: https://anaconda.org/jbednar/census
.. _`OpenSky`: https://anaconda.org/jbednar/opensky
.. _`HoloViews`: https://anaconda.org/jbednar/holoviews_datashader
.. _`datashader examples`: https://raw.githubusercontent.com/bokeh/datashader/master/examples/README.md



.. raw:: html
  
   </div>


.. raw:: html
  :file: latest_news.html


Other resources
---------------

You can watch a short talk about datashader on YouTube:
`Datashader: Revealing the Structure of Genuinely Big Data`_.
The video, `Visualizing Billions of Points of Data`_, and its `slides`_
from a February 2016 one-hour talk introducing Datashader are also
available, but do not cover more recent extensions to the library.

.. _`Datashader: Revealing the Structure of Genuinely Big Data`: https://www.youtube.com/watch?v=6m3CFbKmK_c
.. _`Visualizing Billions of Points of Data`: http://go2.continuum.io/JN12XH0g0W0Rb300CZ00000
.. _`slides`: http://go2.continuum.io/V0Nc000C300W100X20HZhR0

Some of the original ideas for datashader were developed under the
name Abstract Rendering, which is described in a `2014 SPIE VDA paper`_.

.. _`2014 SPIE VDA paper`: http://www.crest.iu.edu/publications/prints/2014/Cottam2014OutOfCore.pdf

The source code for datashader is maintained at our `Github site`_, and
is documented using the API link on this page.

.. _`GitHub site`: https://github.com/bokeh/datashader

We recommend the `Getting Started Guide <getting_started>`_ to learn
the basic concepts and start using Datashader as quickly as possible.

The `User Guide <user_guide>`_ covers specific topics in more detail.

The `API <Reference_Manual>`_ is the definitive guide to each part of
Datashader, but the same information is available more conveniently via
the `help()` command as needed when using each component.

Please feel free to report `issues
<https://github.com/ioam/holoviews/issues>`_ or `contribute code
<https://help.github.com/articles/about-pull-requests>`_. You are also
welcome to chat with the developers on `gitter
<https://gitter.im/ioam/holoviews>`_.


.. toctree::
   :hidden:
   :maxdepth: 2

   Getting Started <getting_started/index>
   User Guide <user_guide/index>
   Topics <topics/index>
   API <api>
   FAQ

